--bio的tag对应的整数值	
local __ReverseB2Type = {};
__ReverseB2Type[8] = 0 ;
--__ReverseB2Type[9] = 9 ;
--__ReverseB2Type[10] = 10 ;
--__ReverseB2Type[11] = 11 ;
__ReverseB2Type[12] = -1 ;
__ReverseB2Type[13] = 1;
__ReverseB2Type[14] = 2 ;
__ReverseB2Type[15] = 3 ;
__ReverseB2Type[16] = 4 ;
__ReverseB2Type[17] = 5 ;
__ReverseB2Type[18] = 6 ;
__ReverseB2Type[19] = 7 ;
__ReverseB2Type[20] = 8 ;
__ReverseB2Type[21] = 9 ;
__ReverseB2Type[22] = 10 ;
__ReverseB2Type[23] = 11 ;
__ReverseB2Type[24] = 12 ;
__ReverseB2Type[25] = 13 ;
__ReverseB2Type[26] =  14;
__ReverseB2Type[27] =  15;
__ReverseB2Type[28] =  16;
__ReverseB2Type[29] =  17;
__ReverseB2Type[30] =  18;
__ReverseB2Type[31] =  19;
__ReverseB2Type[32] =  20;
__ReverseB2Type[33] =  21;
__ReverseB2Type[34] =  22;
__ReverseB2Type[35] =  23;
__ReverseB2Type[36] =  24;
__ReverseB2Type[37] =  25;
__ReverseB2Type[38] =  26;
__ReverseB2Type[39] =  27;
__ReverseB2Type[40] =  28;
__ReverseB2Type[41] =  29;
__ReverseB2Type[42] =  30;
__ReverseB2Type[43] =  31;
__ReverseB2Type[44] =  32;
--1字节无符号和有符号对应关系
               --u  - s
-- 0111 1111 = 127 -> 127

-- 1000 0000 = 128 -> -128
-- 1000 0001 = 129 -> -127 
-- 1111 1110 = 254 ->  -2
-- 1111 1111 = 255 ->  -1
 
function bio2IntLua(bio)
	local tag = string.byte(bio,1,1);
	local int = __ReverseB2Type[tag];
	if int then
		return int;
	elseif tag == 9 then --INT_8B
		local int0 = string.byte(bio,2,2);
		if int0 >= 128 then--字节是负数,里面存放的1字节是负数的补码,比如读出来是128， 128=1000 0000，对应signed char 是 -127，而127=0111 1111
			local int0_abs = int0;
			int0_abs = 255 - int0;
			int0_abs = int0_abs + 1;
			if int0_abs == 256 then --取反+1
				int0_abs = 0;
			else
			end	
			int = -int0_abs;
		else
			int = int0;
		end
	elseif tag == 10 then--INT_16B
		local int0 = string.byte(bio,2,2)	
		local int1 = string.byte(bio,3,3)
		if int0 >= 128 then--字节是负数,里面存放的2字节是负数的补码
			local int0_abs = int0;
			local int1_abs = int1;	
			local carry = 1;
		  	int1_abs = 255 - int1;
			int1_abs = int1_abs + carry;
			if int1_abs == 256 then --取反+1
				int1_abs = 0;
				carry = 1;
			else 
				carry = 0;
			end
			int0_abs = 255 - int0;
			int0_abs = int0_abs + carry;
			if int0_abs == 256 then --取反+1
				int0_abs = 0;
				carry = 1;
			else
				carry = 0;
			end
			int = -(int0_abs*256 + int1_abs);
		else
			int =(int0*256 + int1);
		end
	elseif tag == 11 then--INT_32B
		local int0 = string.byte(bio,2,2);
		local int1 = string.byte(bio,3,3)
		local int2 = string.byte(bio,4,4)	
		local int3 = string.byte(bio,5,5)		
		--字节是负数,里面存放的4字节是负数的补码
		if int0 >= 128 then
			local int0_abs = int0;
			local int1_abs = int1;
			local int2_abs = int2;
			local int3_abs = int3;	
			--每一个字节取反，然后加1，得到的就是这个负数的绝对值
			local carry = 1;--取反加一就是负数绝对值
		  	int3_abs = 255 - int3;
			int3_abs = int3_abs + carry;
			if int3_abs == 256 then --每bit求反
				int3_abs = 0;
				carry = 1;
			else 
				carry = 0;
			end
			int2_abs = 255 - int2;
			int2_abs = int2_abs + carry;
			if int2_abs == 256 then --每bit求反
				int2_abs = 0;
				carry = 1;
			else
				carry = 0;
			end	
			int1_abs = 255 - int1;
			int1_abs = int1_abs + carry;
			if int1_abs == 256 then --每bit求反
				int1_abs = 0;
				carry = 1;
			else
				carry = 0;
			end
			int0_abs = 255 - int0;
			int0_abs = int0_abs + carry;
			if int0_abs == 256 then --每bit求反
				int0_abs = 0;
				carry = 1;
			else
				carry = 0;
			end
			int = -(int0_abs * 16777216 + int1_abs*65536 + int2_abs*256 + int3_abs);
		else
			int =(int0 * 16777216 + int1*65536 + int2*256 + int3);
		end	
	else
		error('无效的bio，不能转为int');
	end
	return int;
end
